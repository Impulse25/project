<?php
// bot/webhook.php - –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram

require_once __DIR__ . '/config.php';
require_once __DIR__ . '/helpers/telegram.php';
require_once __DIR__ . '/helpers/database.php';

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
require_once __DIR__ . '/commands/start.php';
require_once __DIR__ . '/commands/new.php';
require_once __DIR__ . '/commands/my.php';
require_once __DIR__ . '/commands/all.php';
require_once __DIR__ . '/commands/stats.php';
require_once __DIR__ . '/commands/help.php';

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
$content = file_get_contents('php://input');
$update = json_decode($content, true);

botLog("Webhook received", $update);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
if (isset($update['message'])) {
    $message = $update['message'];
    $chatId = $message['chat']['id'];
    $text = $message['text'] ?? '';
    $telegramUsername = $message['from']['username'] ?? 'unknown';
    $telegramId = $message['from']['id'];
    
    botLog("Processing message", [
        'chat_id' => $chatId,
        'text' => $text,
        'from' => $telegramUsername
    ]);
    
    // –†–æ—É—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥
    if (strpos($text, '/start') === 0) {
        handleStartCommand($chatId, $telegramUsername, $telegramId, $text);
    } elseif ($text === '/new') {
        handleNewCommand($chatId, $telegramId);
    } elseif ($text === '/my') {
        handleMyCommand($chatId, $telegramId);
    } elseif ($text === '/all') {
        handleAllCommand($chatId, $telegramId);
    } elseif ($text === '/stats') {
        handleStatsCommand($chatId, $telegramId);
    } elseif ($text === '/help') {
        handleHelpCommand($chatId);
    } else {
        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        sendMessage($chatId, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ (callback query)
if (isset($update['callback_query'])) {
    $callbackQuery = $update['callback_query'];
    $chatId = $callbackQuery['message']['chat']['id'];
    $messageId = $callbackQuery['message']['message_id'];
    $callbackData = $callbackQuery['data'];
    $telegramId = $callbackQuery['from']['id'];
    
    botLog("Processing callback", [
        'chat_id' => $chatId,
        'callback_data' => $callbackData
    ]);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    $user = getUserByTelegramId($pdo, $telegramId);
    
    if (!$user) {
        answerCallbackQuery($callbackQuery['id'], "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", true);
        return;
    }
    
    // –ü–∞—Ä—Å–∏–º callback data
    list($action, $requestId) = explode('_', $callbackData);
    
    if ($action === 'take') {
        // –í–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É
        $result = takeRequest($pdo, $requestId, $user['id']);
        
        if ($result['success']) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            $request = getRequestById($pdo, $requestId);
            $text = formatRequest($request);
            $buttons = getRequestButtons($request['id'], 'in_progress');
            $keyboard = createInlineKeyboard($buttons);
            
            editMessage($chatId, $messageId, $text, $keyboard);
            answerCallbackQuery($callbackQuery['id'], "‚úÖ –ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!");
            
            botLog("Request taken via button", [
                'request_id' => $requestId,
                'technician' => $user['username']
            ]);
        } else {
            answerCallbackQuery($callbackQuery['id'], "‚ùå " . $result['message'], true);
        }
    } elseif ($action === 'done') {
        // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É
        $result = completeRequest($pdo, $requestId, $user['id']);
        
        if ($result['success']) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            $request = getRequestById($pdo, $requestId);
            $text = formatRequest($request);
            $text .= "\n\n‚úÖ <b>–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>";
            
            editMessage($chatId, $messageId, $text);
            answerCallbackQuery($callbackQuery['id'], "‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
            
            botLog("Request completed via button", [
                'request_id' => $requestId,
                'technician' => $user['username']
            ]);
        } else {
            answerCallbackQuery($callbackQuery['id'], "‚ùå " . $result['message'], true);
        }
    } elseif ($action === 'refresh') {
        // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        $request = getRequestById($pdo, $requestId);
        
        if ($request) {
            $text = formatRequest($request);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∑–∞—è–≤–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∞ –∏–ª–∏ —Å–≤–æ–±–æ–¥–Ω–∞—è
            if ($request['status'] === 'approved' || $request['technician_id'] == $user['id']) {
                $buttons = getRequestButtons($request['id'], $request['status']);
                $keyboard = createInlineKeyboard($buttons);
                editMessage($chatId, $messageId, $text, $keyboard);
            } else {
                editMessage($chatId, $messageId, $text);
            }
            
            answerCallbackQuery($callbackQuery['id'], "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ");
        } else {
            answerCallbackQuery($callbackQuery['id'], "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", true);
        }
    }
}

http_response_code(200);
?>
